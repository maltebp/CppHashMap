
Todo:
    ✔ Set hash for unordered_map
    ✔ Test rehashing for unordered_map
    ✔ Resize and rehash
    ✔ Linked list
        ✔ Iterator
        ☐ Emplacement logic
    ✔ Iterator unit test
    ✔ How are elements indexed in the .NET implementation?
    ☐ Quadratic probing map:
        ☐ Insert
        ☐ Get
            ☐ How do you know when to stop?
                When it you encounter an empty cell, or if you end up at the same bucket as previously
        ☐ Remove
            Do lazy deletion
            ✔ Figure out how lazy deletion is cleaned
                During search, we move the found element to the deleted space
        ☐ Iterator
        ☐ Unit tests
    ☐ Create unit test where indices just hash to the same thing



Plan:

    Investigation:
        ✔ Test unordered_map
            ✔ Does it allocate everytime an element is added? (because of the usage of linked list)
        ✔ Understand C# implementation
            ✔ Write correct C# variant
            ✔ Understand how holes are fixed
            ✔ Read SO post on why using primes for array sizes is useful

        Iterator:
            ✔ is this <container>::iterator syntax necessary?
                No - I believe the iterator pattern is determined by members being avaliable (<container>.begin())

    Code:

        ✔ Setup Premake project

        Setup Catch:
            ✔ Introduce Catch lib
            ✔ Convert source code into static lib
            ✔ Create unit test project

        ✔ Design/setup general hash signature

        Implementations:
        Each implementation should support insert, get, contains, iterator (should support foreach),
        rehash callback, memory footprint and have unit tests

            ☐ Regular linked list
            ☐ .NET-like linked list
            ☐ Linear probing 
            ☐ Quadratic probing
        
        ☐ Create emplacement logic for one implementation 
            (just to try the andunderstand the complications of it)

        Benchmark:
            ☐ Create benchmark project
            ✔ Create interface for generalizing hashmap
            IHashMap methods for benchmarking:
                ☐ Rehash callback
                ☐ Memory footprint
                ☐ Load factor

            ☐ Different level of hash funcion quality
            At different number of entries test:
                ☐ Insertion time
                ☐ Query time
                ☐ Iteration time
                ☐ Rehashing time (for the ones available)
                ☐ Keep track of rehashing count
                ☐ Keep track of load factor
                ☐ Keep track of memory footprint

            Note: std::unordered_map probably cannot give information about
            several of these, so we need the option to opt out of them.

    ☐ Create README and describe project
    
    Optional:
        ☐ Test on a mac
        ☐ Test on a Linux dist
        